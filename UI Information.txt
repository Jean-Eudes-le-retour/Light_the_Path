________________________________________________
                TO PREPARE A MENU
________________________________________________
              --FULLY CUSTOMIZED--

local m = ui_elements.create(UI_MENU)
m.texture[0] = ui_elements.getNewMenuBackground(<width>,<height>) -- (or a custom texture)
m.buttons = { {xpos = 5, ypos = 5, texture_id = BUTTON_TEXTURE_NORMAL (1), onClick = function(m,b) ... end, text = "Return to Game",(font = FONT_DEFAULT),(align = "center")}, ... }
m.texture[BUTTON_TEXTURE_NORMAL] = love.graphics.newImage("path_to_regular_button") --Technically optional... But it wouldn't be fully customized then.

-- OPTIONAL ARGUMENTS --
m.window_position_mode = MENU_CENTER --(by default)
m.isBlocking = true --(by default)
m.texture[BUTTON_TEXTURE_PRESSED] = love.graphics.newImage("path_to_pressed_button") -- for both if unspecified, will show texture[1]
m.texture[BUTTON_TEXTURE_HOVERED] = love.graphics.newImage("path_to_hovered_button")
m.update = function(m) ... end
--This function can serve to give special behaviour to buttons or update the menu itself
--Note that the onClick function will only ever be called ON MOUSE 1 RELEASE if button argument "pressed" evaluates to true
--It's also worth noting that no other functions but Menu:resize() updates the menu graphics by default,
--so it is recommended that this function check button states and previous button states (buttons[i].texture_id, buttons[i].previous_texture_id) and calls m:draw() accordingly
--Recommend using ui_elements.checkButtonUpdate by default for those purposes

-- IMPORTANT FINALIZATION --
ui_elements.updateButtonDimensions(m) --So that the menu is initialized to correct values for default update function (IMPERATIVE for: width/height;texture_id initializations)
m:resize()  --Creates the internal canvas, includes m:draw()

________________________________________________
              --DEFAULT MENUS--
local m = ui_elements.create(UI_MENU)
m.buttons = { {onClick = function(m,b) ... end, text = "Return to Game"}, ... }
ui_elements.fitButtons(m)

-- OPTIONAL ARGUMENTS --
m.window_position_mode = ...
m.isBlocking = ...
m.texture[BUTTON_TEXTURE_NORMAL] = ...
m.texture[BUTTON_TEXTURE_PRESSED] = ...
m.texture[BUTTON_TEXTURE_HOVERED] = ...

-- IMPORTANT FINALIZATION --
m:resize()
--AND DONE! EASY PEASY!
________________________________________________
             TO PREPARE A DIALOG
________________________________________________

local m = ui_elements.create(UI_DIALOG)
m.text = { --2 possible formats as shown below for each page
--[[PAGE1]]       {--[[COLOR1]]{0,0,0,1},--[[TEXT1]]"BLAH BLAH",--[[COLOR2]]{1,0,0,1},--[[TEXT2]]"BLAH BLAH BLAH" --[[ETC...]]},
--[[PAGE2]]       {--[[TEXT]]"BLAH BLAH"}
--[[...]]
                 }
m.charname = {
--[[NAME for PAGE1]] "Mr. X",
--[[NAME for PAGE2]] "Mr. Y"
             }
m.text_rate = {--[[PAGE1]]20,--[[PAGE2]]40} -- DEFAULT_TEXT_RATE = 20
m.animation = {}
--[[PAGE1 animation]]     m.animation[1] = {love.graphics.newImage("path_to_frame_1.png"), love.graphics.newImage("path_to_frame_2.png"), --[[...,]] love.graphics.newImage("path_to_still_end_frame.png")}
--[[PAGE1 animation mode]]m.animation[1][0] = {4 --[[Hz frequency of frame change; defaults to 2]], 5 --[[repetitions of animation before shoing still end frame]], nil --[[fade; NOT IMPLEMENTED MUST BE NIL]]}
-- repetitions: [-1] -> loop until end of text; [0] -> loop forever; [<any other negative number>] -> only still end frame; DEFAULTS TO -1
m.sfx = {} --NOT IMPLEMENTED
m.isBlocking = true --by default
m.noSkip = false --by default (for interactive levels where text remains no matter what you do until an objective is achieved)

--Unlikely to need to change m.update!
m:resize()
